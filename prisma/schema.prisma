generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  companyId     String
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  company  Company   @relation(fields: [companyId], references: [id])
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id     String @id @default(uuid())
  name   String
  domain String @unique

  videos  Video[]
  tags    Tag[]
  batches UploadBatch[]
  members User[]
}

model Video {
  id                  String    @id @default(uuid())
  uploadBatchId       String?
  companyId           String
  language            String    @default("pt")
  uploadOrder         Int
  duration            Int
  sizeInBytes         Int
  title               String
  storageKey          String?
  audioStorageKey     String?
  subtitlesStorageKey String?
  description         String?
  externalProviderId  String?   @unique
  processedAt         DateTime?
  commitUrl           String?
  createdAt           DateTime  @default(now())

  tags          Tag[]
  uploadBatch   UploadBatch?   @relation(fields: [uploadBatchId], references: [id], onDelete: SetNull)
  transcription Transcription?
  webhooks      Webhook[]
  company       Company        @relation(fields: [companyId], references: [id])
}

enum WebhookType {
  PROCESS_VIDEO
  CREATE_TRANSCRIPTION
  UPLOAD_TO_EXTERNAL_PROVIDER
  UPDATE_EXTERNAL_PROVIDER_STATUS
  CREATE_SUBTITLES_FROM_TRANSCRIPTION
}

enum WebhookStatus {
  RUNNING
  SUCCESS
  ERROR
}

model Webhook {
  id         String        @id @default(uuid())
  videoId    String
  type       WebhookType
  status     WebhookStatus @default(RUNNING)
  createdAt  DateTime      @default(now())
  finishedAt DateTime?
  metadata   String?

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Transcription {
  id         String    @id @default(uuid())
  videoId    String    @unique
  reviewedAt DateTime?
  createdAt  DateTime  @default(now())

  video    Video                  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  segments TranscriptionSegment[]
}

model TranscriptionSegment {
  id              String  @id @default(uuid())
  transcriptionId String
  start           Decimal @db.Decimal(10, 2)
  end             Decimal @db.Decimal(10, 2)
  text            String

  transcription Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)
}

model UploadBatch {
  id        String   @id @default(uuid())
  companyId String
  createdAt DateTime @default(now())

  videos  Video[]
  company Company @relation(fields: [companyId], references: [id])
}

model Tag {
  id        String   @id @default(uuid())
  companyId String
  slug      String   @unique
  createdAt DateTime @default(now())

  videos  Video[]
  company Company @relation(fields: [companyId], references: [id])
}
